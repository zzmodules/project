using err
using log
using mem
using path
using project
using runtime_assert::{ assert }
using string

fn main() -> int {
  bool mut status = false;

  new+1024 mut error = err::make();
  new project_path = path::canonicalize("./", &error);
  new mut proj = project::current();
  //new mut proj = project::make(&project_path.buffer.string);

  log::info("-- %s", project_path.cstr());
  if !error.check() {
    status = proj.open(&error);
  }

  log::info("project path: %s", proj.path.cstr());

  if error.check() {
    log::error("%s", error.trace.cstr());
  }

  assert(status);
  log::info("name=%s", proj.config.name.cstr());
  log::info("version=%s", proj.config.version.cstr());

  {
    let mut it = proj.config.cincludes.iterator();
    while !it.ended {
      let node = it.next();
      log::info("%s", node->value);
    }
  }

  {
    let mut it = proj.config.cobjects.iterator();
    while !it.ended {
      let node = it.next();
      log::info("%s", node->value);
    }
  }

  {
    let mut it = proj.config.pkgconfig.iterator();
    while !it.ended {
      let node = it.next();
      log::info("%s", node->value);
    }
  }

  {
    let mut it = proj.config.cflags.iterator();
    while !it.ended {
      let node = it.next();
      log::info("%s", node->value);
    }
  }

  {
    let mut it = proj.config.lflags.iterator();
    while !it.ended {
      let node = it.next();
      log::info("%s", node->value);
    }
  }

  {
    let mut it = proj.config.dependencies.iterator();
    while !it.ended {
      let node = it.next();
      let dep = as<project::ProjectDependency *>(node->value);
      log::info("%s = %s", dep->name.cstr(), dep->version.cstr());
    }
  }

  {
    let mut it = proj.config.repos.iterator();
    while !it.ended {
      let node = it.next();
      let dep = as<project::ProjectRepository *>(node->value);
      log::info("%s = %s", dep->name.cstr(), dep->url.cstr());
    }
  }

  {
    new+64000 mut output = string::make();
    proj.to_toml(&output);
    log::info("\n%s", output.cstr());
  }

  {
    new+64000 mut output = string::make();
    proj.to_json(&output);
    log::info("\n%s", output.cstr());
  }

  log::info("%s", proj.name());
  log::info("%s", proj.version());
  log::info("%s", proj.description());
  let mut cincludes = proj.cincludes();
  while !cincludes.ended {
    let cinclude = as<char *>(cincludes.next()->value);
    log::info("%s", cinclude);
  }
  return 0;
}
